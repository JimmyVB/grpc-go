// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: proto/cars.proto

package go_car_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CarManagementClient is the client API for CarManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarManagementClient interface {
	CreateNewCar(ctx context.Context, in *NewCar, opts ...grpc.CallOption) (*Car, error)
	GetCars(ctx context.Context, in *GetCarsParams, opts ...grpc.CallOption) (*CarList, error)
}

type carManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewCarManagementClient(cc grpc.ClientConnInterface) CarManagementClient {
	return &carManagementClient{cc}
}

func (c *carManagementClient) CreateNewCar(ctx context.Context, in *NewCar, opts ...grpc.CallOption) (*Car, error) {
	out := new(Car)
	err := c.cc.Invoke(ctx, "/grpc.CarManagement/CreateNewCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carManagementClient) GetCars(ctx context.Context, in *GetCarsParams, opts ...grpc.CallOption) (*CarList, error) {
	out := new(CarList)
	err := c.cc.Invoke(ctx, "/grpc.CarManagement/GetCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarManagementServer is the server API for CarManagement service.
// All implementations must embed UnimplementedCarManagementServer
// for forward compatibility
type CarManagementServer interface {
	CreateNewCar(context.Context, *NewCar) (*Car, error)
	GetCars(context.Context, *GetCarsParams) (*CarList, error)
	mustEmbedUnimplementedCarManagementServer()
}

// UnimplementedCarManagementServer must be embedded to have forward compatible implementations.
type UnimplementedCarManagementServer struct {
}

func (UnimplementedCarManagementServer) CreateNewCar(context.Context, *NewCar) (*Car, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewCar not implemented")
}
func (UnimplementedCarManagementServer) GetCars(context.Context, *GetCarsParams) (*CarList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCars not implemented")
}
func (UnimplementedCarManagementServer) mustEmbedUnimplementedCarManagementServer() {}

// UnsafeCarManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarManagementServer will
// result in compilation errors.
type UnsafeCarManagementServer interface {
	mustEmbedUnimplementedCarManagementServer()
}

func RegisterCarManagementServer(s grpc.ServiceRegistrar, srv CarManagementServer) {
	s.RegisterService(&CarManagement_ServiceDesc, srv)
}

func _CarManagement_CreateNewCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewCar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarManagementServer).CreateNewCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CarManagement/CreateNewCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarManagementServer).CreateNewCar(ctx, req.(*NewCar))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarManagement_GetCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarsParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarManagementServer).GetCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.CarManagement/GetCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarManagementServer).GetCars(ctx, req.(*GetCarsParams))
	}
	return interceptor(ctx, in, info, handler)
}

// CarManagement_ServiceDesc is the grpc.ServiceDesc for CarManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.CarManagement",
	HandlerType: (*CarManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewCar",
			Handler:    _CarManagement_CreateNewCar_Handler,
		},
		{
			MethodName: "GetCars",
			Handler:    _CarManagement_GetCars_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cars.proto",
}
